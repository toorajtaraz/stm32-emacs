;;; stm32.el --- Support for the STM32 mircocontrollers programming
;; 
;; Filename: stm32.el
;; Description: Debug and Code compile support for STM32 based projects
;; Author: Tooraj Taraz <tooraj.info@gmail.com>
;; Maintainer: Tooraj Taraz <tooraj.info@gmail.com>
;; Created: 23 Dec 2021
;; Version: 0.1
;; Package-Requires: (irony gud)
;; Last-Updated: 23 Dec 2021
;;           By: Tooraj Taraz
;;     Update #: 0
;; URL: https://github.com/toorajtaraz
;; Doc URL: https://github.com/toorajtaraz
;; Keywords: stm32 emacs
;; Compatibility: emacs irony-mode
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is based on https://github.com/SL-RU/stm32-emacs
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful, but
;; WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.
;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 
;;; Code:

(defgroup stm32 nil
  "STM32 projects integration"
  :group 'development)

(defcustom stm32-st-util-command "st-util"
  "The command to use to run st-util."
  :group 'stm32
  :type 'string)

(defcustom stm32-cmd-make
  "make -j12"
  "Command to build project generated by cmake in build directory."
  :group 'stm32
  :type 'string)


(defcustom stm32-cmd-init
  "bash $HOME/.doom.d/stm32/stm32prj_init.sh"
  "Command to build project generated by cmake in build directory."
  :group 'stm32
  :type 'string)

(defcustom stm32-gdb-start
  "arm-none-eabi-gdb -iex \"target extended-remote localhost:4242\" -i=mi "
  "Command to run gdb for gud."
  :group 'stm32
  :type 'string)

(defcustom stm32-build-dir-debug
  "Debug"
  "Directory for make build."
  :group 'stm32
  :type 'string)

(defcustom stm32-build-dir-release
  "Release"
  "Directory for make build."
  :group 'stm32
  :type 'string)

(defcustom stm32-build-compilation-database
  "compile_commands.json"
  "File in stm32-build-dir with compilation commands.  You need to set(CMAKE_EXPORT_COMPILE_COMMANDS 'ON') to cmake generate it."
  :group 'stm32
  :type 'string)


(require 'gud)
(require 'irony)

(defun stm32-get-project-root-dir ()
  "Return root path of current project."
  (if irony--working-directory
      (let
	  ((dir (substring (irony-cdb-json--locate-db) 0 (- (length (irony-cdb-json--locate-db)) (length stm32-build-compilation-database)))))
	(if (file-exists-p dir)
	    (progn (message (concat "Project dir: "
				    dir))
		   dir) ;return dir
	  (progn
	    (message "No root.")
	    (message dir)
            nil)))))


(defun stm32-get-project-build-dir-debug ()
  "Return path to build dir of current project."
  (if (stm32-get-project-root-dir)
      (let ((dir (concat
		  (stm32-get-project-root-dir)
		  stm32-build-dir-debug)))
	(if (file-exists-p dir)
	    (progn (message (concat "Project build dir: "
				    dir))
		   dir) ;return dir
          (message "No build dir")
          nil))))


(defun stm32-get-project-build-dir-release ()
  "Return path to build dir of current project."
  (if (stm32-get-project-root-dir)
      (let ((dir (concat
		  (stm32-get-project-root-dir)
		  stm32-build-dir-release)))
	(if (file-exists-p dir)
	    (progn (message (concat "Project build dir: "
				    dir))
		   dir) ;return dir
          (message "No build dir")
          nil))))



(defun stm32-get-project-name ()
  "Return name of current project."
  (if (stm32-get-project-root-dir)
      (let* ((pth (substring (stm32-get-project-root-dir) 0 -1))
	     (name (car (last (split-string pth "/")))))
	(message (concat "Project name: " name))
	name)
    (message "Wrong root directory")))

(defun stm32-make-build-debug (&optional path)
  "Execute make.  Use existing project path's or use optional arg PATH."
  (interactive)
  (let ((dir (or path (stm32-get-project-build-dir-debug))))
    (if (not dir)
        (message "No 'build' directory in your project's root.")
      (when (not (file-directory-p dir))
	(make-directory dir))
      (when (file-directory-p dir)
	(message "make...")
	(compile
	 (concat "cd " dir "; " stm32-cmd-make ";"))
	(message "ok")))))

(defun stm32-make-build-release (&optional path)
  "Execute make.  Use existing project path's or use optional arg PATH."
  (interactive)
  (let ((dir (or path (stm32-get-project-build-dir-release))))
    (if (not dir)
        (message "No 'build' directory in your project's root.")
      (when (not (file-directory-p dir))
	(make-directory dir))
      (when (file-directory-p dir)
	(message "and make...")
	(compile
	 (concat "cd " dir "; " stm32-cmd-make ";"))
	(message "ok")))))

(defun stm32-run-st-util ()
  "Run st-util gdb server."
  (interactive)
  (let ((p (get-buffer-process "*st-util*")))
    (when p
      (if (y-or-n-p "Kill currently running st-util? ")
	  (interrupt-process p)
	(user-error "St-util already running!"))))
  (sleep-for 2) ;wait for st-util being killed
  (with-temp-buffer "*st-util*"
		    (async-shell-command stm32-st-util-command
					 "*st-util*"
					 "*Messages*")
		    ))

(defun stm32-init-project ()
  "Initializes fresh project."
  (interactive)
  (let ((p (get-buffer-process "*INIT_STM32_PROJECT*")))
    (when p
      (if (y-or-n-p "Kill currently running initializer? ")
	  (interrupt-process p)
	(user-error "Initializer already running!"))))
  (sleep-for 2) ;wait for Initializer being killed
  (with-temp-buffer "*INIT_STM32_PROJECT*"
		    (async-shell-command (concat stm32-cmd-init " " (read-directory-name "Root Directory:"))
					 "*INIT_STM32_PROJECT*"
					 "*Messages*")
		    ))

(defun stm32-start-gdb-debug ()
  "Strart gud arm-none-eabi-gdb and connect to st-util."
  (interactive)
  (let ((dir (stm32-get-project-build-dir-debug))
	(name (stm32-get-project-name))
	(p (get-buffer-process "*st-util*")))
    (when (not p)
      (stm32-run-st-util))
    (when dir
      (let ((pth (concat dir "/" name ".elf")))
	(when (file-exists-p pth)
	  (progn
	    (message pth)
	    (gdb (concat stm32-gdb-start pth))))))))


(defun stm32-start-gdb-release ()
  "Strart gud arm-none-eabi-gdb and connect to st-util."
  (interactive)
  (let ((dir (stm32-get-project-build-dir-release))
	(name (stm32-get-project-name))
	(p (get-buffer-process "*st-util*")))
    (when (not p)
      (stm32-run-st-util))
    (when dir
      (let ((pth (concat dir "/" name ".elf")))
	(when (file-exists-p pth)
	  (progn
	    (message pth)
	    (gdb (concat stm32-gdb-start pth))))))))

(defun stm32-kill-gdb ()
  "Kill all st-util, gdb or openocd processes and buffers."
  (interactive)
  (when (get-buffer-process "*gud-target extended-remote localhost:3333*")
    (kill-process (get-buffer-process "*gud-target extended-remote localhost:3333*")))
  (when (get-buffer-process "*openocd*")
    (kill-process (get-buffer-process "*openocd*")))
  (when (get-buffer-process "*st-util*")
    (kill-process (get-buffer-process "*st-util*")))
  (when (get-buffer-process "*gud-target extended-remote localhost:4242*")
    (kill-process (get-buffer-process "*gud-target extended-remote localhost:4242*")))

  (sleep-for 1)

  (when (get-buffer "*openocd*")
    (kill-buffer "*openocd*"))
  (when (get-buffer "*gud-target extended-remote localhost:3333*")
    (kill-buffer "*gud-target extended-remote localhost:3333*"))
  (when (get-buffer "*st-util*")
    (kill-buffer "*st-util*"))
  (when (get-buffer "*gud-target extended-remote localhost:4242*")
    (kill-buffer "*gud-target extended-remote localhost:4242*"))
  )

(provide 'stm32)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; stm32.el ends here

